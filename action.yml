name: "Kubernetes toolset"
description: "Github Action with Kubernetes tools: kubectl, kustomize, helm, kubeval, kubeaudit, conftest, jq, yq, go"
author: "Stefan Prodan"
branding:
  icon: "command"
  color: "blue"
inputs:
  cache:
    description: "Whether to enable caching"
    required: false
    default: "true"
  kubectl:
    description: "kubectl version"
    required: false
  yq:
    description: "yq version"
    required: false
  kustomize:
    description: "kustomize version"
    required: false
  helm:
    description: "helm version"
    required: false
  kubeseal:
    description: "kubeseal version"
    required: false
  kubeval:
    description: "kubeval version"
    required: false
  conftest:
    description: "conftest version"
    required: false
  kubeaudit:
    description: "kubeaudit version"
    required: false
  kubeconform:
    description: "kubeconform version"
    required: false
  kyverno:
    description: "kyverno version"
    required: false

runs:
  using: "composite"
  steps:
    - id: kubectl
      shell: bash
      if: "${{ inputs.kubectl }}"
      run: |
        if [ "${{ inputs.kubectl }}" == "latest" ]; then
            echo "version=$(curl -sL https://storage.googleapis.com/kubernetes-release/release/stable.txt | sed -e 's/^v//')" >> $GITHUB_OUTPUT
        else
            echo "version=${{ inputs.kubectl }}" >> $GITHUB_OUTPUT
        fi

    - id: kubectl-cache
      uses: actions/cache@v3
      if: "${{ inputs.kubectl && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/kubectl
        key: "${{ runner.os }}-${{ steps.kubectl.outputs.version }}"

    - shell: bash
      if: ${{ inputs.kubectl && steps.kubectl-cache.outputs.cache-hit != 'true' }}
      run: |
        rm -f /usr/local/bin/kubectl
        curl --fail -sL "https://storage.googleapis.com/kubernetes-release/release/v${{ steps.kubectl.outputs.version }}/bin/linux/amd64/kubectl" \
            -o kubectl && chmod +x kubectl
        mv kubectl /usr/local/bin/kubectl
        kubectl version --client

    - id: yq
      shell: bash
      if: "${{ inputs.yq }}"
      run: |
        if [ "${{ inputs.yq }}" == "latest" ]; then
            echo "version=$(curl -sL https://api.github.com/repos/mikefarah/yq/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')" >> $GITHUB_OUTPUT
        else
            echo "version=${{ inputs.yq }}" >> $GITHUB_OUTPUT
        fi

    - id: yq-cache
      uses: actions/cache@v3
      if: "${{ inputs.yq && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/yq
        key: "${{ runner.os }}-${{ steps.yq.outputs.version }}"

    - shell: bash
      if: ${{ inputs.yq && steps.yq-cache.outputs.cache-hit != 'true' }}
      run: |
        rm -f /usr/local/bin/yq
        curl -sL https://github.com/mikefarah/yq/releases/download/v${{ steps.yq.outputs.version }}/yq_linux_amd64 \
            -o yq && chmod +x yq
        mv yq /usr/local/bin/yq
        yq --version

    - id: kustomize
      shell: bash
      if: "${{ inputs.kustomize }}"
      run: |
        if [ "${{ inputs.kustomize }}" == "latest" ]; then
            VER=$(curl -sL https://api.github.com/repos/kubernetes-sigs/kustomize/releases | jq -r 'sort_by(.tag_name) | last(.[].tag_name | select(. | test("^kustomize/.")))' | sed -e 's/^kustomize\/v//')
            echo "version=$VER" >> $GITHUB_OUTPUT
        else
            echo "version=${{ inputs.kustomize }}" >> $GITHUB_OUTPUT
        fi

    - id: kustomize-cache
      uses: actions/cache@v3
      if: "${{ inputs.kustomize && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/kustomize
        key: "${{ runner.os }}-${{ steps.kustomize.outputs.version }}"

    - shell: bash
      if: ${{ inputs.kustomize && steps.kustomize-cache.outputs.cache-hit != 'true' }}
      run: |
        URL="https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
        rm -f /usr/local/bin/kustomize
        curl -s "$URL" | bash -s -- "${{ steps.kustomize.outputs.version }}" /usr/local/bin/
        kustomize version

    - id: helm
      shell: bash
      if: "${{ inputs.helm }}"
      run: |
        if [ "${{ inputs.helm }}" == "latest" ]; then
            echo "version=$(curl -sL https://api.github.com/repos/helm/helm/releases/latest | jq -r '.tag_name' | sed -e 's/^v//')" >> $GITHUB_OUTPUT
        else
            echo "version=${{ inputs.helm }}" $GITHUB_OUTPUT
        fi

    - id: helm-cache
      uses: actions/cache@v3
      if: "${{ inputs.helm && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/helm
        key: "${{ runner.os }}-${{ steps.helm.outputs.version }}"

    - shell: bash
      if: ${{ inputs.helm && steps.helm-cache.outputs.cache-hit != 'true' }}
      run: |
        rm -f /usr/local/bin/helm
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod 700 get_helm.sh
        ./get_helm.sh -v "v${{ steps.helm.outputs.version }}"
        helm version --client

    - id: kubeseal
      shell: bash
      if: "${{ inputs.kubeseal }}"
      run: |
        if [ "${{ inputs.kubeseal }}" == "latest" ]; then
            VER=$(curl -sL https://api.github.com/repos/bitnami-labs/sealed-secrets/releases | jq -r 'sort_by(.tag_name) | last(.[].tag_name | select(. | test("^v.")))' | sed -e 's/^v//')
            echo "version=$VER" >> $GITHUB_OUTPUT
        else
            echo "version=${{ inputs.kubeseal }}" >> $GITHUB_OUTPUT
        fi

    - id: kubeseal-cache
      uses: actions/cache@v3
      if: "${{ inputs.kubeseal && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/kubeseal
        key: "${{ runner.os }}-${{ steps.kubeseal.outputs.version }}"

    - shell: bash
      if: ${{ inputs.kubeseal && steps.kubeseal-cache.outputs.cache-hit != 'true' }}
      run: |
        KUBESEAL_VER='${{ steps.kubeseal.outputs.version }}'
        rm -f /usr/local/bin/kubeseal
        curl -sL https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VER}/kubeseal-${KUBESEAL_VER}-linux-amd64.tar.gz |\
            tar xz && mv kubeseal /usr/local/bin/kubeseal
        kubeseal --version

    - id: kubeval
      shell: bash
      if: "${{ inputs.kubeval }}"
      run: |
        if [ "${{ inputs.kubeval }}" == "latest" ]; then
            echo "version=$(curl -sL https://api.github.com/repos/instrumenta/kubeval/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')" >> $GITHUB_OUTPUT
        else
            echo "version=${{ inputs.kubeval }}" >> $GITHUB_OUTPUT
        fi

    - id: kubeval-cache
      uses: actions/cache@v3
      if: "${{ inputs.kubeval && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/kubeval
        key: "${{ runner.os }}-${{ steps.kubeval.outputs.version }}"

    - shell: bash
      if: ${{ inputs.kubeval && steps.kubeval-cache.outputs.cache-hit != 'true' }}
      run: |
        rm -f /usr/local/bin/kubeval
        curl -sL https://github.com/instrumenta/kubeval/releases/download/v${{ steps.kubeval.outputs.version }}/kubeval-linux-amd64.tar.gz |\
            tar xz && mv kubeval /usr/local/bin/kubeval
        kubeval --version

    - id: conftest
      shell: bash
      if: "${{ inputs.conftest }}"
      run: |
        if [ "${{ inputs.conftest }}" == "latest" ]; then
            echo "version=$(curl -sL https://api.github.com/repos/open-policy-agent/conftest/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')" >> $GITHUB_OUTPUT
        else
            echo "version=${{ inputs.conftest }}" >> $GITHUB_OUTPUT
        fi

    - id: conftest-cache
      uses: actions/cache@v3
      if: "${{ inputs.conftest && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/conftest
        key: "${{ runner.os }}-${{ steps.conftest.outputs.version }}"

    - shell: bash
      if: ${{ inputs.conftest && steps.conftest-cache.outputs.cache-hit != 'true' }}
      run: |
        CONFTEST_VER='${{ steps.conftest.outputs.version }}'
        rm -f /usr/local/bin/conftest
        wget -O conftest https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VER}/conftest_${CONFTEST_VER}_Linux_x86_64.tar.gz -q
        tar xzf conftest && mv conftest /usr/local/bin/conftest
        conftest --version

    - id: kubeaudit
      shell: bash
      if: "${{ inputs.kubeaudit }}"
      run: |
        if [ "${{ inputs.kubeaudit }}" == "latest" ]; then
            echo "version=$(curl -sL https://api.github.com/repos/Shopify/kubeaudit/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')" >> $GITHUB_OUTPUT
        else
            echo "version=${{ inputs.kubeaudit }}" >> $GITHUB_OUTPUT
        fi

    - id: kubeaudit-cache
      uses: actions/cache@v3
      if: "${{ inputs.kubeaudit && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/kubeaudit
        key: "${{ runner.os }}-${{ steps.kubeaudit.outputs.version }}"

    - shell: bash
      if: ${{ inputs.kubeaudit && steps.kubeaudit-cache.outputs.cache-hit != 'true' }}
      run: |
        KUBEAUDIT_VER='${{ steps.kubeaudit.outputs.version }}'
        rm -f /usr/local/bin/kubeaudit
        wget -O kubeaudit https://github.com/Shopify/kubeaudit/releases/download/v${KUBEAUDIT_VER}/kubeaudit_${KUBEAUDIT_VER}_linux_amd64.tar.gz -q
        tar xzf kubeaudit && mv kubeaudit /usr/local/bin/kubeaudit
        kubeaudit version

    - id: kubeconform
      shell: bash
      if: "${{ inputs.kubeconform }}"
      run: |
        if [ "${{ inputs.kubeconform }}" == "latest" ]; then
            echo "version=$(curl -sL https://api.github.com/repos/yannh/kubeconform/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')" >> $GITHUB_OUTPUT
        else
            echo "version=${{ inputs.kubeconform }}" >> $GITHUB_OUTPUT
        fi

    - id: kubeconform-cache
      uses: actions/cache@v3
      if: "${{ inputs.kubeconform && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/kubeconform
        key: "${{ runner.os }}-${{ steps.kubeconform.outputs.version }}"

    - shell: bash
      if: ${{ inputs.kubeconform && steps.kubeconform-cache.outputs.cache-hit != 'true' }}
      run: |
        rm -f /usr/local/bin/kubeconform
        curl -sSL https://github.com/yannh/kubeconform/releases/download/v${{ steps.kubeconform.outputs.version }}/kubeconform-linux-amd64.tar.gz |\
            tar xz && mv kubeconform /usr/local/bin/kubeconform
        kubeconform -v

    - id: kyverno
      shell: bash
      if: "${{ inputs.kyverno }}"
      run: |
        if [ "${{ inputs.kyverno }}" == "latest" ]; then
            echo "version::$(curl -sL https://api.github.com/repos/kyverno/kyverno/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')" >> $GITHUB_OUTPUT
        else
            echo "version::${{ inputs.kyverno }}" >> $GITHUB_OUTPUT
        fi

    - id: kyverno-cache
      uses: actions/cache@v3
      if: "${{ inputs.kyverno && inputs.cache == 'true' }}"
      with:
        path: /usr/local/bin/kyverno
        key: "${{ runner.os }}-${{ steps.kyverno.outputs.version }}"

    - shell: bash
      if: ${{ inputs.kyverno && steps.kyverno-cache.outputs.cache-hit != 'true' }}
      run: |
        KYVERNO_VER='${{ steps.kyverno.outputs.version }}'
        rm -f /usr/local/bin/kyverno
        curl -sSL https://github.com/kyverno/kyverno/releases/download/v${KYVERNO_VER}/kyverno-cli_v${KYVERNO_VER}_linux_x86_64.tar.gz |\
            tar xz && mv kyverno /usr/local/bin/kyverno
        kyverno version
